@page "/festivals/lineup"

@using ShowTime.Entities;
@using ShowTime.Repositories.Interfaces;
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Blazorise
@using Blazorise.Bootstrap5

@code {
    [Inject] public required IRepositoryFestival RepositoryFestival { get; set; }
    [Inject] public required IRepositoryBand RepositoryBand { get; set; }
    [SupplyParameterFromQuery(Name = "id")]
    public string? IdString { get; set; }
    private Festival currentFestival { get; set; } = new();

    private List<Band> bands = new();
    private List<Band> unbooked = new();
    private List<Band> booked = new();

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(IdString, out Guid id))
        {
            currentFestival = await RepositoryFestival.GetByIdWithBandsAsync(id) ?? new Festival();
            if (currentFestival.Id == Guid.Empty)
            {
                NavigationManager.NavigateTo("/error?type=notfound");
                return;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/error?type=badformat");
            return;
        }

        bands = (await RepositoryBand.GetAllAsync()).ToList();

        booked = currentFestival.Bands.ToList();
        unbooked = bands.Where(b => !booked.Any(bb => bb.Id == b.Id)).ToList();
    }

    private async Task HandleSubmit()
    {
        currentFestival.Bands.Clear();
        foreach (var band in booked)
        {
            currentFestival.Bands.Add(band);
        }

        RepositoryFestival.Update(currentFestival);
        await RepositoryFestival.SaveChangesAsync();

        NavigationManager.NavigateTo($"/festivals");
    }
}

<Container>
    <TransferList
        TItem="Band"
        Items="@bands"
        @bind-ItemsStart="unbooked"
        @bind-ItemsEnd="booked"
        SelectionMode="ListGroupSelectionMode.Multiple"
        Mode="ListGroupMode.Selectable"
        Scrollable="true"
        ShowMoveAll="false"
        ValueField="item => item.Name"
        TextField="item => item.Name">
    </TransferList>

    <Button Color="Color.Primary" Class="mt-3" Clicked="HandleSubmit">Save</Button>
</Container>